# vim: foldmethod=marker foldlevel=1

# Environment settings {{{
global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C',
'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS',
'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
		return first != ignore
	except StopIteration:
		return False
def preamble():
	for line in range(vim.current.window.cursor[0]):
		if None != re.match(r"[\\]begin{document}",vim.current.buffer[line]):
			return False
	return True
def tooHard():
	a = snip.window.cursor[0]
	b = snip.window.cursor[1]
	snip.buffer[snip.window.cursor[0]-1] =snip.buffer[snip.window.cursor[0]-1][:snip.window.cursor[1]-2] + snip.buffer[snip.window.cursor[0]-1][snip.window.cursor[1]+1:]
	snip.cursor.set(a-1,b-2)
def asy():
	row = snip.window.cursor[0] - 1
	i = row
	test = False
	bol = True
	while bol == True and test == False:
		test = re.search(r"\\end{asy}", vim.current.buffer[i]) != None
		bol = re.search(r"\\begin{\w*", vim.current.buffer[i]) == None
		bol = re.search(r"\\end{(?!(asy))", vim.current.buffer[i]) == None
		i = i+1
	if test == False:
		return False
	bol = True
	test = False
	i = row
	while bol == True and test == False:
		test = re.search(r"\\begin{asy}", vim.current.buffer[i]) != None
		bol = re.search(r"\\end{\w*", vim.current.buffer[i]) == None
		bol = re.search(r"\\begin{(?!(asy))", vim.current.buffer[i]) == None
		i = i-1
	if test == True:
		return True
	return False
endglobal
# }}}

# Math mode Snipets {{{

# Super and sub scripts{{{
# Superscripts {{{
# context "math()"
snippet sr "^2" "math()" iAe
^2
endsnippet
context "math()"
snippet cb "^3" iA
^3
endsnippet
context "math()"
snippet compl "complement" iA
^{c}
endsnippet
context "math()"
snippet inv "inverse" iA
^{-1}
endsnippet
context "math()"
snippet '((\^\^)|(td))' "superscript" iAr
^{$1}$0
endsnippet
# }}}

# Subscripts {{{
context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet
context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet
context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet
# }}}
# }}}

# Punctuation{{{
#{{{
#snippet '(?<!([A-Za-z\\]))(\\)(?!(inft))([A-Za-z]{3,})' "Even Smarter Brackets" wr
#`!p snip.rv = match.group(0)`{$1}$2
#endsnippet
context "math()"
snippet '(\\)?(tex)' "text mode" iAr
\text{${1:${VISUAL}}}
endsnippet
context "math()"
pre_expand "tooHard()"
snippet {{ "left right Brackets" iA
\left\\\{ $1 \right\\\}
endsnippet
context "math()"
pre_expand "tooHard()"
snippet (( "left right Parenthesis" iA
\left( $1 \right)
endsnippet
context "math()"
pre_expand "tooHard()"
snippet [[ "left right Square Brackets" iA
\left[ $1 \right]
endsnippet
context "math()"
snippet || "left right bars" iA
\left| $1 \right|
endsnippet
context "math() and re.match('\(\)', snip.buffer[snip.window.cursor[0]][snip.window.cursor[1]-1:snip.window.cursor[1]+1]) == None"
snippet '(?<!(\())\(' "parenthesis" irA
($1)
endsnippet
context "math() and re.match('\[\]', snip.buffer[snip.window.cursor[0]-1][snip.window.cursor[1]-1:snip.window.cursor[1]+1]) == None"
snippet '(?<!(\[))\[' "square brackets" irA
[$1]
endsnippet
# }}}

# Fractions {{{
context "math()"
snippet '([`/]/)' "Fraction" irA
\\frac{$1}{$2}$0
endsnippet
context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet
# }}}

# Bar and Hat {{{
context "math()"
priority 10
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
priority 10
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet
# }}}

# Integral Limits Sums and Products {{{
context "math()"
priority 100
snippet lim "Limit" i
\lim_{${1:n} \to ${2:\infty}} $0
endsnippet
context "math()"
priority 100
snippet sum "Sum" i
\sum_{${1:i=1}}^{${2:\infty}} $0
endsnippet
context "math()"
priority 100
snippet int "Integral" i
\int_{${1:0}}^{${2:\infty}} $0
endsnippet
context "math()"
snippet `I "Int" iA
\int_{${1:0}}^{${2:\infty}} $0
endsnippet
context "math()"
priority 100
snippet prod "product" i
\prod_{${1:i=1}}^{${2:n}} $0
endsnippet
context "math()"
snippet samp "sample" iA
${1:X}_1, $1_2, $1_3, \ldots $1_${2:n}
endsnippet
# }}}

# Sympy cancer{{{
snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t, s = symbols('x y z t s')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet
# }}}

# Vim LateX Symbols {{{
# Greek Letters {{{
context "math()"
snippet `a "alpha" iA
\alpha
endsnippet
context "math()"
snippet `b "beta" iA
\beta
endsnippet
context math()
snippet `g "gamma" iA
\gamma
endsnippet
context math()
snippet `d "delta" iA
\delta
endsnippet
context math()
snippet `e "varepsilon" iA
\varepsilon
endsnippet
context math()
snippet `z "zeta" iA
\zeta
endsnippet
#context math()
#snippet `h "eta" iA
#\eta
#endsnippet
context math()
snippet `q "theta" iA
\theta
endsnippet
#context math()
#snippet `i "iota" iA
#\iota
#endsnippet
context math()
snippet `k "kappa" iA
\kappa
endsnippet
context math()
snippet `l "lambda" iA
\lambda
endsnippet
context math()
snippet `m "mu" iA
\mu
endsnippet
#context math()
#snippet `n "nu" iA
#\nu
#endsnippet
#context math()
#snippet `x "xi" iA
#\xi
#endsnippet
context math()
snippet `p "pi" iA
\pi
endsnippet
context math()
snippet `r "rho" iA
\rho
endsnippet
context math()
snippet `s "sigma" iA
\sigma
endsnippet
context math()
snippet `v "varsigma" iA
\varsigma
endsnippet
context math()
snippet `t "tau" iA
\tau
endsnippet
#context math()
#snippet `u "upsilon" iA
#\upsilon
#endsnippet
context math()
snippet `f "varphi" iA
\varphi
endsnippet
#context math()
#snippet `c "chi" iA
#\chi
#endsnippet
#context math()
#snippet `y "psi" iA
#\psi
#endsnippet
context math()
snippet `w "omega" iA
\omega
endsnippet
context math()
snippet `A "Alpha" iA
\Alpha
endsnippet
context math()
snippet `B "Beta" iA
\Beta
endsnippet
context math()
snippet `G "Gamma" iA
\Gamma
endsnippet
context math()
snippet `D "Delta" iA
\Delta
endsnippet
context math()
snippet `E "Epsilon" iA
\Epsilon
endsnippet
snippet `Z "Greek big Z" iA
\mathrm{Z}
endsnippet
#context math()
#snippet `H "Eta" iA
#\Eta
#endsnippet
context math()
snippet `K "Kappa" iA
\Kappa
endsnippet
context math()
snippet `L "Lambda" iA
\Lambda
endsnippet
context math()
snippet `M "Mu" iA
\Mu
endsnippet
#context math()
#snippet `N "Nu" iA
#\Nu
#endsnippet
#context math()
#snippet `X "Xi" iA
#\Xi
#endsnippet
context math()
snippet `P "Pi" iA
\Pi
endsnippet
context math()
snippet `R "Rho" iA
\Rho
endsnippet
context math()
snippet `S "Sigma" iA
\Sigma
endsnippet
context math()
snippet `T "Tau" iA
\Tau
endsnippet
context math()
snippet `U "Upsilon" iA
\Upsilon
endsnippet
context math()
snippet `C "Chi" iA
\Chi
endsnippet
#context math()
#snippet `Y "Psi" iA
#\Psi
#endsnippet
context math()
snippet `W "Omega" iA
\Omega
endsnippet
# }}}
# Math Symbols {{{
context "math()"
snippet `0 "varnothin" iA
\varnothing
endsnippet
context "math()"
snippet `( "subset" iA
\subset
endsnippet
context "math()"
snippet `) "supset" iA
\supset
endsnippet
context "math()"
snippet `= "equiv" iA
\equiv
endsnippet
context "math()"
snippet =~ "approx" iA
\approx
endsnippet
context "math()"
snippet `- "bigcap" iA
\bigcap
endsnippet
context "math()"
snippet `+ "bigcup" iA
\bigcup
endsnippet
context "math()"
snippet `. "cdot" iA
\cdot
endsnippet
context "math()"
snippet `* "times" iA
\times
endsnippet
context "math()"
snippet `\ "setminus" iA
\setminus
endsnippet
context math()
snippet `@ "circ" iA
\circ
endsnippet
context math()
snippet `& "wedge" iA
\wedge
endsnippet
context math()
snippet `, "nonumber" iA
\nonumber
endsnippet
context math()
snippet '(ooo)|(`8)' "infty" irA
\infty
endsnippet
context math()
snippet `_ "overline" iA
\overline{$1}$0
endsnippet
context math()
snippet `6 "partial" iA
\partial
endsnippet
context math()
snippet `~ "tilde{}" iA
\tilde{$1}$0
endsnippet
context math()
snippet `: "ddot{}" iA
\ddot{$1}$0
endsnippet
context math()
snippet `^ "hat{}" iA
\hat{$1}$0
endsnippet
context math()
snippet `2 "hat{}" iA
\sqrt{$1}$0
endsnippet
# }}}

# }}}

# Fonts{{{
context "math()"
snippet '([a-zA-Z])cal' "mathcal" ir
\mathcal{`!p snip.rv = match.group(1).upper()`}
endsnippet
context "math()"
snippet '([a-zA-Z])bb' "mathbb" ir
\mathbb{`!p snip.rv = match.group(1).upper()`}
endsnippet
# }}}.

context "math()"
snippet sq "square root" iA
\sqrt{$1}$0
endsnippet
context "math()"
snippet '(\\)?(display)' "displayStyle" irA
\displaystyle 
endsnippet

# }}}

# Text mode Snipets {{{
# Entering Math mode {{{
snippet dm "Math" wA
\[
	$1
.\]$0
endsnippet
snippet mk "Math" wA
$${1}$
endsnippet
snippet $$ "Math (old)" wA
$$1$$0
endsnippet
# }}}

# Begin / End Environment {{{
priority 200
snippet beg "begin{} / end{}"
\begin{$1}
	$0
\end{$1}
endsnippet
snippet def "begin{def} / end{def}"
\begin{definition}
	$0
\end{definition}
endsnippet
# }}}

# Vimlatex neat macros{{{
# {{{
context "not math() and snip.buffer[snip.window.cursor[0]-1].count('(') > snip.buffer[snip.window.cursor[0]-1].count(')')"
snippet ( "Parenthesis"  iA
(${1:${VISUAL}})
endsnippet
context " snip.buffer[snip.window.cursor[0]-1].count('{') > snip.buffer[snip.window.cursor[0]-1].count('}')"
snippet '(?<!(\{))\{' "brackets" irA
{${1:${VISUAL}}}
endsnippet
context "not math() and snip.buffer[snip.window.cursor[0]-1].count('[') > snip.buffer[snip.window.cursor[0]-1].count(']')"
snippet [ "Square Brackets" iA
[${1:${VISUAL}}]
endsnippet
snippet :: "dots" iA
\dots 
endsnippet
# }}}

# Environment Snippets {{{
snippet sss "Subsection" Ab
\subsection{$1}
$0
endsnippet
snippet sse "Section" Ab
\section{$1}
$0
endsnippet
snippet een "enumerate" Ab
\begin{enumerate}
	\item $1
\end{enumerate}
endsnippet
snippet eal "align*" Ab
\begin{align*}
	$1
\end{align*}
endsnippet
# }}}

# Fonts {{{
snippet FBF "Bold Font" wA
\textbf{$1}$0
endsnippet
snippet FEM "Emph" wA
\emph{$1}$0
endsnippet
snippet FVO "vocab" wA
\vocab{$1}$0
endsnippet
snippet FIT "Italic" wA
\textit{$1}$0
endsnippet
snippet FTT "Italic" wA
\texttt{$1}$0
endsnippet
snippet FUN "Underline" wA
\underline{$1}$0
endsnippet
# }}}

#snippet '(\\?)([A-Za-z]+)(<F8>)' "change to command" rAi
#\\`!p snip.rv = match.group(2)`{$1}$0
#endsnippet

# }}}

# Preamble Snippets {{{
context preamble()
priority 150
snippet '[A-Za-z]+' "usepackage"  br
\\usepackage[$1]{`!p snip.rv = match.group(0)`}
$0
endsnippet
#context preamble()
#priority 151
#snippet 'title' "title"  br
#\title{$1}
#$0
#endsnippet
#context preamble()
#priority 152
#snippet 'subtitle' "title"  br
#\subtitle{$1}
#$0
#endsnippet
# }}}
context asy()
snippet point "making a point" i
$1 = ($2,$3);
filldraw(circle($1,0.07), ${4:black}, black+linewidth(0.1));
label("${5:\$$1\$}", $1, ${6:N});
endsnippet
