#+TITLE: Emacs Configuration
#+CREATOR: twl
#+OPTIONS: toc:4

* Packages
** sensible-default.el
#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/packages/sensible-defaults.el/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
  (sensible-defaults/backup-to-temp-directory)
#+END_SRC

** use-package
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (setq use-pacakge-verbose t)
  (setq use-package-always-ensure t)

  (eval-when-compile
    (require 'use-package))
#+END_SRC

*** auto-compile
#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
    :init
    (setq load-prefer-newer t)
    :config
    (auto-compile-on-load-mode))
#+END_SRC

** hungry-delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :config
    (global-hungry-delete-mode))
#+END_SRC

** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC

** rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters)
#+END_SRC

** beacon
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :init
    (setq avy-all-windows t)
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC

** paraedit
#+BEGIN_SRC emacs-lisp
  (use-package paredit)
#+END_SRC

** counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel)
#+END_SRC

*** ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy :demand
    :config
    (setq ivy-use-virtual-buffers t
          ivy-count-format "%d/%d ")
    (ivy-mode 1))
  (use-package flyspell-correct-ivy)
#+END_SRC

** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init
    (global-flycheck-mode))
#+END_SRC

* Personal information
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Ting Wei Liu"
        user-mail-address "i3wgnit@gmail.com")
#+END_SRC

* evil-mode
** config
#+BEGIN_SRC emacs-lisp
  (defun twl/evil-init ()
    (setq evil-want-integration nil)
    (setq evil-search-module 'evil-search)
    (setq evil-ex-complete-emacs-commands nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-shift-round nil))

  (defun twl/evil-config ()
    (global-set-key (kbd "C-j") 'evil-scroll-down)
    (global-set-key (kbd "C-k") 'evil-scroll-up))
#+END_SRC

** evil-leader
#+BEGIN_SRC emacs-lisp
  (defun twl/evil-leader-config ()
    (evil-leader/set-leader ",")
    (evil-leader/set-key
      "/" 'swiper
      "e" 'counsel-find-file
      "w" 'save-buffer
      "q" 'twl/kill-cur-buffer
      "h" 'dired-jump
      "b" 'ibuffer
      "x" 'counsel-M-x
      "s" 'avy-goto-word-0
      "z" 'flyspell-correct-previous-word-generic))
#+END_SRC

** Load packages
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (twl/evil-init)

    (use-package evil-leader
      :config
      (global-evil-leader-mode 1)
      (twl/evil-leader-config))

    (use-package evil-surround
      :config
      (global-evil-surround-mode 1))

    (use-package evil-indent-textobject)

    :config
    (evil-mode 1)
    (twl/evil-config))
#+END_SRC

** evil-collection
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :custom
    (evil-collection-setup-minibuffer t)
    :config
    (evil-collection-init))
#+END_SRC

* General
** Utility functions
#+BEGIN_SRC emacs-lisp
  (defun twl/kill-cur-buffer ()
    "Kill the current buffer without prompt"
    (interactive)
    (kill-buffer (current-buffer)))

  (defun twl/rename-file (new-name)
    (interactive "FNew name: ")
    (let ((filename (buffer-file-name)))
      (if filename
          (progn
            (when (buffer-modified-p)
              (save-buffer))
            (rename-file filename new-name t)
            (kill-buffer (current-buffer))
            (find-file new-name)
            (message "Renamed '%s' -> '%s'" filename new-name))
        (message "Buffer '%s' isn't backed by a file!" (buffer-name)))))

  (defun twl/config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (defun twl/config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
#+END_SRC

** UI settings
*** dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 25))))
#+END_SRC

*** Remove menus
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (when window-system
    (scroll-bar-mode 0))
#+END_SRC

*** Pretty symbols
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
  (use-package pretty-mode
    :config
    ;(global-pretty-mode t)
    (pretty-deactivate-groups
     '(:equality
       :ordering :ordering-double :ordering-triple
       :arrows :arrows-twoheaded
       :punctuation))
    (pretty-activate-groups
     '(:sub-and-superscripts :greek :arithmetic-nary)))
#+END_SRC

*** Line number
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC

**** nlinum-relative
#+BEGIN_SRC emacs-lisp
  (use-package nlinum-relative
    :config
    (nlinum-relative-setup-evil)
    (global-nlinum-relative-mode 1))
#+END_SRC

*** Modeline
**** spaceline
#+BEGIN_SRC emacs-lisp
  ;;(use-package spaceline
  ;;  :config
  ;;  (require 'spaceline-config)
  ;;  (setq powerline-default-separator 'arrow)
  ;;  (spaceline-spacemacs-theme))
#+END_SRC

**** diminish-mode
#+BEGIN_SRC emacs-lisp
  (defmacro diminish-minor-mode (filename mode &optional abbrev)
    `(eval-after-load (symbol-name ,filename)
       '(diminish ,mode ,abbrev)))

  (defmacro diminish-major-mode (mode-hook abbrev)
    `(add-hook ,mode-hook
               (lambda () (setq mode-name ,abbrev))))

  (use-package diminish
    :config
    (diminish-minor-mode 'hungry-delete 'hungry-delete-mode)
    (diminish-minor-mode 'which-key 'which-key-mode)
    (diminish-minor-mode 'undo-tree 'undo-tree-mode)
    (diminish-minor-mode 'flycheck 'flycheck-mode)
    (diminish-minor-mode 'flyspell 'flyspell-mode)
    (diminish-minor-mode 'beacon 'beacon-mode)
    (diminish-minor-mode 'paredit 'paredit-mode)
    (diminish-minor-mode 'subword 'subword-mode)
    (diminish-minor-mode 'ivy 'ivy-mode)

    (diminish-major-mode 'emacs-lisp-mode-hook "el")
    (diminish-major-mode 'haskell-mode-hook "λ=")
    (diminish-major-mode 'lisp-interaction-mode-hook "λ")
    (diminish-major-mode 'python-mode-hook "Py"))
#+END_SRC

*** Time
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+END_SRC

** Quality of life
*** Disable visual bell #+BEGIN_SRC emacs-lisp (setq ring-bell-function 'ignore) #+END_SRC
*** Show invisible char
#+BEGIN_SRC emacs-lisp
  ;;(setq-default show-trailing-whitespace t)
  ;;(global-whitespace-mode 1)
#+END_SRC

*** Fix scrolling
#+BEGIN_SRC emacs-lisp
  (setq
   redisplay-dont-pause t
   scroll-margin 3
   scroll-step 1
   scroll-conservatively 100000
   scroll-preserve-screen-position 1
   ;;fast-but-imprecise-scrolling nil
   ;;jit-lock-defer-time 0
   )
#+END_SRC

*** Better buffers
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

*** Electric-indent
#+BEGIN_SRC emacs-lisp
  (add-to-list 'electric-indent-chars ?\))
  (add-to-list 'electric-indent-chars ?\])
  (add-to-list 'electric-indent-chars ?\})

  (electric-indent-mode 1)
#+END_SRC

*** No tabs on my lawn
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
#+END_SRC

*** Use unicode
#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
#+END_SRC

** Quick shortcuts
*** Open config
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c e") 'twl/config-visit)
#+END_SRC

*** Reload config
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c r") 'twl/config-reload)
#+END_SRC

* Emacs auto-completion
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

** ido
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
  (global-set-key (kbd "C-x l") 'twl/kill-cur-buffer)
#+END_SRC

*** ido-vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :config
    (ido-vertical-mode 1))
#+END_SRC

** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :config
    (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC

* Major modes
** Text-mode
*** config
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'flyspell-mode)
#+END_SRC

** Org-mode
*** config
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))

  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-src-window-setup 'current-window)
  (add-hook 'org-mode-hook 'flyspell-mode)
  (setq org-html-postamble nil)
#+END_SRC

*** org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook #'org-bullets-mode))
#+END_SRC

*** ox
#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs)
#+END_SRC

*** htmlize
#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC

** Lisps
#+BEGIN_SRC emacs-lisp
  (setq lispy-mode-hooks
        '(emacs-lisp-mode-hook
          lisp-mode-hook
          scheme-mode-hook
          racket-mode-hook))

  (dolist (hook lispy-mode-hooks)
    (add-hook hook (lambda ()
                     (setq show-paren-style 'expression)
                     (paredit-mode)
                     (rainbow-delimiters-mode))))
#+END_SRC

** LaTeX-mode
*** AucTeX
#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :defer t)
#+END_SRC

*** RefTeX
#+BEGIN_SRC emacs-lisp
  (setq reftex-plug-intoAUCTeX t)
  (defun twl/turn-on-reftex ()
    (interactive)
    (reftex-mode))
  (add-hook 'LaTeX-mode-hook 'twl/turn-on-reftex)
#+END_SRC

*** LatexMK
#+BEGIN_SRC emacs-lisp
  (use-package auctex-latexmk
    :config
    (auctex-latexmk-setup)
    (add-hook 'TeX-mode-hook (lambda () (setq TeX-command-default "LatexMK")))
    (add-hook 'LaTeX-mode-hook (lambda () (setq TeX-command-default "LatexMK")))
    (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
    (setq TeX-source-correlate-start-server t))
#+END_SRC

*** Math mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (setq LaTeX-math-list
        '(("ve" "varepsilon")
          ("vo" "varnothing")))
#+END_SRC

*** config
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key-for-mode 'LaTeX-mode
    "\\" 'TeX-electric-insert)
  (setq TeX-electric-escape nil)
  (setq TeX-insert-braces nil)
  (setq TeX-parse-self t)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-to-list 'TeX-view-program-selection
               '(output-pdf "Zathura"))
#+END_SRC

** Haskell-mode
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode)
  (add-hook 'haskell-mode-hook
            (lambda ()
              (haskell-doc-mode)
              (turn-on-haskell-indent)))
#+END_SRC

** Emacs-lisp-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
#+END_SRC

** Racket-mode
#+BEGIN_SRC emacs-lisp
  (use-package racket-mode)
#+END_SRC

** Assembly
#+BEGIN_SRC emacs-lisp
  (use-package iasm-mode)
#+END_SRC

*** MMIXAL
#+BEGIN_SRC emacs-lisp
  (use-package mixal-mode)
#+END_SRC

** Javascript
*** Auto-mode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . javascript-mode))
#+END_SRC

*** Tab stuff
#+BEGIN_SRC emacs-lisp
  (setq-default js-indent-level 2)
#+END_SRC

*** flycheck
#+BEGIN_SRC emacs-lisp
  (add-hook 'javascript-mode-hook (lambda () (flycheck-describe 'javascript-standard)))
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)

    :config
    (use-package evil-magit)
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)
    (add-hook 'git-commit-mode-hook 'turn-on-flyspell)
    (add-hook 'with-editor-mode-hook 'evil-insert-state))
#+END_SRC
