#
# ~/.bashrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

alias ls='ls --color=auto'
alias ll='ls -l'
alias la='ls -al'

# == PS1 ==
case ${USER} in
    waigni) _get_PS1() { echo -n '\[\e[0;97m\]w\[\e[38;5;250m\]a\[\e[38;5;245m\]i\[\e[38;5;81m\]g\[\e[38;5;45m\]n\[\e[38;5;39m\]i \[\e[1;97m\]\W \[\e[m\e(B\]' ; } ;;
    root)   _get_PS1() { echo -n '\[\e[0;91m\][root] \[\e[1;97m\]\W \[\e[m\e(B\]' ; } ;;
    *)      _get_PS1() { echo -n '% \[\e[1;97m\]\W \[\e[m\e(B\]' ; } ;;
esac
export PS1="$(_get_PS1)${RANGER_LEVEL:+[ranger] }${SSH_TTY:+(ssh) }"


#export PS1="[\u@\h \W]\$ ${RANGER_LEVEL:+[ranger] }${SSH_TTY:+(ssh) }"
export EDITOR=vim
export VISUAL=vim
export MAN_DISABLE_SECCOMP=1
export CM_SELECTIONS=clipboard
export CM_LAUNCHER=rofi
export BROWSER=qutebrowser


# shortcuts
[ -s "$HOME/.bashrc.shortcuts" ] && source "$HOME/.bashrc.shortcuts"


# nvm
export NVM_DIR="$HOME/.nvm"
# This loads nvm
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

set -o vi


export PATH=$HOME/bin:/usr/local/bin:$HOME/.local/bin:${PATH}


# == INPUT ==
# Make Tab autocomplete ignore case
set completion-ignore-case on

# List all match cases
set show-all-if-ambiguous on

# Show all results at once
set page-completions off

# Ask to show more than 200 completions
set completion-query-items 200

# Show extra info when completing
set visible-stats on

# Make autocomplete look at the text after the cursor.
set skip-completed-text on

# Allow UTF-8 i/o
set input-meta on
set output-meta on
set convert-meta off


# == ALIAS ==
# cd
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
# cd is probably faster ಠ_ಠ
alias ~="cd ~"
alias -- -="cd -"

# VIM
alias v="vim"

# Ranger
alias ra="ranger"

# Enable aliases to be sudo'ed
alias sudo="sudo "

# Stopwatch
alias sw="echo 'StopWatch started. Stop with Ctrl+D.' && time cat"

# Reload .bash_profile
alias br="source $HOME/.bashrc"

# Full system upgrade
alias pSyyu="yay --nouseask --noconfirm -Syyu"

# xclip
alias xclip="xclip -selection c "


# == RANGER ==
ranger() {
    if [ -z "$RANGER_LEVEL" ]; then
        tempfile="$(mktemp -t tmp.XXXXXX)"
        trap "rm -f -- \"$tempfile\"" EXIT
        /usr/bin/ranger --choosedir="$tempfile" "${@:-$(pwd)}"
        test -f "$tempfile" &&
        if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then
            cd -- "$(cat "$tempfile")"
        fi
    else
        exit
    fi
}

[[ -n RANGER_LEVEL ]] && clear

# == MPV ==
function mm() {
    mpv --no-video --ytdl-format=bestaudio ytdl://ytsearch:"$*"
}


